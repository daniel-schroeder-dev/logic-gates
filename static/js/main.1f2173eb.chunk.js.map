{"version":3,"sources":["components/Line/Line.js","components/LineContainer/LineContainer.js","components/NandGateElement/NandGateElement.js","components/NandGate/NandGate.js","components/GateTrack/GateTrack.js","components/Input/Input.js","App.js","serviceWorker.js","index.js"],"names":["Line","props","style","top","left","isOutput","width","borderColor","isOn","className","LineContainer","children","NandGateElement","NandGate","useState","output","setOutput","useEffect","inputValues","A","B","GateTrack","Input","id","label","type","name","checked","value","onChange","e","htmlFor","App","setInputValues","handleInputChange","inputLabel","prevInputValues","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uXAyBeA,MApBf,SAAcC,GAEZ,IAAMC,EAAQ,CACZC,IAAKF,EAAME,IAAM,KACjBC,KAAMH,EAAMI,SAAW,OAAS,IAChCC,MAAOL,EAAMI,SAAW,OAAS,QACjCE,YAAaN,EAAMO,KAAO,UAAY,SAGxC,OACE,yBAAKC,UAAU,OAAOP,MAAOA,K,MCNlBQ,MANf,SAAuBT,GACrB,OACE,yBAAKQ,UAAU,kBAAkBR,EAAMU,W,MCI5BC,MANf,SAAyBX,GACvB,OACE,yBAAKQ,UAAU,uB,MC8BJI,MA1Bf,SAAkBZ,GAAQ,IAAD,EAEKa,oBAAS,GAFd,mBAEhBC,EAFgB,KAERC,EAFQ,KAQvB,OAJAC,qBAAU,WACRD,IAAYf,EAAMiB,YAAYC,GAAKlB,EAAMiB,YAAYE,MACpD,CAACnB,EAAMiB,YAAYC,EAAGlB,EAAMiB,YAAYE,IAGzC,yBAAKX,UAAU,aACb,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAMN,IAAK,GAAIK,KAAMP,EAAMiB,YAAYC,IACvC,kBAAC,EAAD,CAAMhB,IAAK,GAAIK,KAAMP,EAAMiB,YAAYE,KAEzC,kBAAC,EAAD,MACA,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAMjB,IAAK,GAAIE,UAAU,EAAMG,KAAMO,O,MChB9BM,MANf,SAAmBpB,GACjB,OACE,yBAAKQ,UAAU,cAAcR,EAAMU,W,MCuBxBW,MAvBf,SAAerB,GAEb,IAAMsB,EAAE,eAAWtB,EAAMuB,OAEzB,OACE,yBAAKf,UAAU,SACb,8BAAOR,EAAMuB,MAAb,KACA,yBAAKf,UAAU,kBACb,2BAAOA,UAAU,iBAAiBgB,KAAK,QAAQF,GAAG,KAAKG,KAAMzB,EAAMuB,MAAOG,QAAS1B,EAAM2B,MAAOC,SAAU,SAAAC,GAAC,OAAI7B,EAAM4B,SAAS5B,EAAMuB,OAAO,IAAOI,OAAO,IACzJ,2BAAOnB,UAAU,eAAesB,QAASR,GAAzC,MACA,2BAAOd,UAAU,iBAAiBgB,KAAK,QAAQF,GAAG,MAAMG,KAAMzB,EAAMuB,MAAOG,SAAU1B,EAAM2B,MAAQC,SAAU,SAAAC,GAAC,OAAI7B,EAAM4B,SAAS5B,EAAMuB,OAAO,IAAQI,OAAO,IAC7J,2BAAOnB,UAAU,eAAesB,QAASR,GAAzC,U,MCaOS,MArBf,WAAgB,IAAD,EAEyBlB,mBAAS,CAAEK,GAAG,EAAOC,GAAG,IAFjD,mBAENF,EAFM,KAEOe,EAFP,KAIPC,EAAoB,SAACC,EAAYP,GACrCK,GAAe,SAAAG,GAAe,sBAAUA,EAAV,eAA4BD,EAAaP,QAGzE,OACE,yBAAKnB,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUS,YAAaA,KAEzB,0BAAMT,UAAU,aACd,kBAAC,EAAD,CAAOe,MAAM,IAAIK,SAAUK,EAAmBN,MAAOV,EAAYC,IACjE,kBAAC,EAAD,CAAOK,MAAM,IAAIK,SAAUK,EAAmBN,MAAOV,EAAYE,OCXrDiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1f2173eb.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Line.css';\n\nfunction Line(props) {\n\n  const style = {\n    top: props.top + 'px',\n    left: props.isOutput ? '10px' : '0',\n    width: props.isOutput ? '88px' : '100px',\n    borderColor: props.isOn ? '#ffe600' : 'black',\n  };\n\n  return (\n    <div className=\"line\" style={style}></div>\n  );\n}\n\nLine.propTypes = {\n  top: PropTypes.number.isRequired,\n  left: PropTypes.bool, \n  isOn: PropTypes.bool.isRequired,\n};\n\nexport default Line;","import React from 'react';\nimport './LineContainer.css';\n\nfunction LineContainer(props) {\n  return (\n    <div className=\"line-container\">{props.children}</div>\n  );\n}\n\nexport default LineContainer;","import React from 'react';\nimport './NandGateElement.css';\n\nfunction NandGateElement(props) {\n  return (\n    <div className=\"nand-gate-element\"></div>\n  );\n}\n\nexport default NandGateElement;","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Line from '../Line/Line';\nimport LineContainer from '../LineContainer/LineContainer';\nimport NandGateElement from '../NandGateElement/NandGateElement';\n\nimport './NandGate.css';\n\nfunction NandGate(props) {\n\n  const [output, setOutput] = useState(false);\n\n  useEffect(() => {\n    setOutput(!(props.inputValues.A && props.inputValues.B));\n  }, [props.inputValues.A, props.inputValues.B]);\n\n  return (\n    <div className=\"nand-gate\">\n      <LineContainer>\n        <Line top={25} isOn={props.inputValues.A} />\n        <Line top={75} isOn={props.inputValues.B} />\n      </LineContainer>\n      <NandGateElement />\n      <LineContainer>\n        <Line top={50} isOutput={true} isOn={output} />\n      </LineContainer>\n    </div>\n  );\n}\n\nNandGate.propTypes = {\n  inputValues: PropTypes.object.isRequired,\n};\n\nexport default NandGate;","import React from 'react';\nimport './GateTrack.css';\n\nfunction GateTrack(props) {\n  return (\n    <div className=\"gate-track\">{props.children}</div>\n  );\n}\n\nexport default GateTrack;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Input.css';\n\nfunction Input(props) {\n\n  const id = `input${props.label}`;\n\n  return (\n    <div className=\"input\">\n      <span>{props.label}:</span>\n      <div className=\"input__wrapper\">\n        <input className=\"input__element\" type=\"radio\" id=\"on\" name={props.label} checked={props.value} onChange={e => props.onChange(props.label, true)} value={true} />\n        <label className=\"input__label\" htmlFor={id}>On</label>\n        <input className=\"input__element\" type=\"radio\" id=\"off\" name={props.label} checked={!props.value}  onChange={e => props.onChange(props.label, false)} value={false} />\n        <label className=\"input__label\" htmlFor={id}>Off</label>\n      </div>\n    </div>\n  );\n}\n\nInput.propTypes = {\n  label: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.bool.isRequired,\n};\n\nexport default Input;","import React, { useState } from 'react';\n\nimport NandGate from './components/NandGate/NandGate';\nimport GateTrack from './components/GateTrack/GateTrack';\nimport Input from './components/Input/Input';\n\nimport './App.css';\n\nfunction App() {\n\n  const [inputValues, setInputValues] = useState({ A: false, B: false });\n\n  const handleInputChange = (inputLabel, value) => {\n    setInputValues(prevInputValues => ({ ...prevInputValues, [inputLabel]: value }));\n  };\n\n  return (\n    <div className=\"app\">\n      <GateTrack>\n        <NandGate inputValues={inputValues} />\n      </GateTrack>\n      <form className=\"app__form\">\n        <Input label=\"A\" onChange={handleInputChange} value={inputValues.A} />\n        <Input label=\"B\" onChange={handleInputChange} value={inputValues.B} />\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}